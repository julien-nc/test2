on:
  push:
    branches:
      - release

name: Publish release

jobs:
  my_super_job:
    name: Build, upload and release in the appstore
    environment: release
    env:
      APP_ID: test2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get current tag
        id: tag
        run: |
          git fetch --tags --force
          tag=$(git tag -l --points-at HEAD)
          echo CURRENT TAG IS '"'${tag}'"' '!!!!'
          vtag=$(echo $tag | grep "^v[0-9]\+\.[0-9]\+\.[0-9]\+" || echo "")
          echo "##[set-output name=currenttag;]$vtag"

      - name: Build project
        if: ${{ startsWith( steps.tag.outputs.currenttag , 'v' ) }}
        id: build_release
        run: |
          echo "##[set-output name=app_id;]$APP_ID"
          echo "###### access secret"
          cat ${MY_SECRET}
          echo "###### make appstore"
          tag=${{ steps.tag.outputs.currenttag }}
          version=${tag/v/}
          echo "webserveruser=runner occ_dir=~/html/nextcloud version=$version make appstore"
          tar cvf /tmp/$APP_ID-$version.tar.gz $GITHUB_WORKSPACE
          echo "##[set-output name=version;]$version"
        env:
          MY_SECRET: ${{ secrets.MY_SECRET }}

      - name: Create Release
        if: ${{ startsWith( steps.tag.outputs.currenttag , 'v' ) }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.currenttag }}
          release_name: ${{ steps.tag.outputs.currenttag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: ${{ startsWith( steps.tag.outputs.currenttag , 'v' ) }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/${{ steps.build_release.outputs.app_id }}-${{ steps.build_release.outputs.version }}.tar.gz
          asset_name: ${{ steps.build_release.outputs.app_id }}-${{ steps.build_release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Publish to appstore
        if: ${{ startsWith( steps.tag.outputs.currenttag , 'v' ) && !endsWith( steps.tag.outputs.currenttag , 'nightly' ) }}
        id: publish
        run: |
          SIGNATURE=$MY_SECRET
          VERSION=${{ steps.build_release.outputs.version }}
          DOWNLOAD_URL=https://github.com/${{ github.repository }}/releases/download/v${VERSION}/${APP_ID}-${VERSION}.tar.gz
          curl -X POST -H "Authorization: Token $APPSTORE_TOKEN" https://apps.nextcloud.com/api/v1/apps/releases -H "Content-Type: application/json" -d '{"download":"'${DOWNLOAD_URL}'", "signature": "'${SIGNATURE}'"}'
        env:
          APPSTORE_TOKEN: ${{ secrets.MY_SECRET }}

      - name: Publish nightly release to appstore
        if: ${{ startsWith( steps.tag.outputs.currenttag , 'v' ) && endsWith( steps.tag.outputs.currenttag , 'nightly' ) }}
        id: nightly
        run: |
          SIGNATURE=$MY_SECRET
          VERSION=${{ steps.build_release.outputs.version }}
          DOWNLOAD_URL=https://github.com/${{ github.repository }}/releases/download/v${VERSION}/${APP_ID}-${VERSION}.tar.gz
          curl -X POST -H "Authorization: Token $APPSTORE_TOKEN" https://apps.nextcloud.com/api/v1/apps/releases -H "Content-Type: application/json" -d '{"download":"'${DOWNLOAD_URL}'", "signature": "'${SIGNATURE}'", "nightly": true}'
        env:
          APPSTORE_TOKEN: ${{ secrets.MY_SECRET }}
